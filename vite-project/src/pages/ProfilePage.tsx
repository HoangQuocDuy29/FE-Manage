// üìÅ FE: src/pages/ProfilePage.tsx
import { useState } from 'react';
import { useAuthStore } from '@/store/authStore';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { toast } from '@/components/ui/use-toast';
import {
  User,
  Mail,
  Phone,
  MapPin,
  Calendar,
  Shield,
  Camera,
  Save,
  Key,
} from 'lucide-react';

export default function ProfilePage() {
  const user = useAuthStore((state) => state.user);
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: user?.phone || '',
    address: user?.address || '',
    bio: user?.bio || '',
  });
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  const handleProfileUpdate = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Call API to update profile
    toast({
      title: 'Th√†nh c√¥ng',
      description: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!',
    });
    setIsEditing(false);
  };

  const handlePasswordChange = (e: React.FormEvent) => {
    e.preventDefault();
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast({
        title: 'L·ªói',
        description: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!',
        variant: 'destructive',
      });
      return;
    }
    // TODO: Call API to change password
    toast({
      title: 'Th√†nh c√¥ng',
      description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!',
    });
    setPasswordData({
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    });
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">H·ªì s∆° c√° nh√¢n</h1>
          <p className="text-muted-foreground">Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>
      </div>

      {/* Profile Card */}
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-4">
            <Avatar className="h-24 w-24">
              <AvatarImage src={user?.avatar} />
              <AvatarFallback>{user?.name?.charAt(0).toUpperCase()}</AvatarFallback>
            </Avatar>
            <div>
              <CardTitle className="text-2xl">{user?.name}</CardTitle>
              <CardDescription>{user?.email}</CardDescription>
              <div className="flex items-center mt-2 space-x-2">
                <Badge variant={user?.role === 'admin' ? 'default' : 'secondary'}>
                  {user?.role === 'admin' ? 'Qu·∫£n tr·ªã vi√™n' : 'Ng∆∞·ªùi d√πng'}
                </Badge>
                <Badge variant="outline">
                  <Calendar className="mr-1 h-3 w-3" />
                  Tham gia t·ª´ {new Date(user?.createdAt || '').toLocaleDateString('vi-VN')}
                </Badge>
              </div>
            </div>
            <Button variant="outline" size="sm" className="ml-auto">
              <Camera className="mr-2 h-4 w-4" />
              ƒê·ªïi ·∫£nh
            </Button>
          </div>
        </CardHeader>
      </Card>

      {/* Tabs */}
      <Tabs defaultValue="info" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="info">Th√¥ng tin c√° nh√¢n</TabsTrigger>
          <TabsTrigger value="security">B·∫£o m·∫≠t</TabsTrigger>
          <TabsTrigger value="activity">Ho·∫°t ƒë·ªông</TabsTrigger>
        </TabsList>

        {/* Personal Information Tab */}
        <TabsContent value="info">
          <Card>
            <CardHeader>
              <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
              <CardDescription>
                C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
              </CardDescription>
            </CardHeader>
            <form onSubmit={handleProfileUpdate}>
              <CardContent className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="name">H·ªç v√† t√™n</Label>
                    <div className="relative">
                      <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="name"
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                        value={profileData.name}
                        onChange={(e) => setProfileData({ ...profileData, name: e.target.value })}
                        disabled={!isEditing}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="email"
                        type="email"
                        placeholder="email@example.com"
                        value={profileData.email}
                        onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}
                        disabled={!isEditing}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="phone"
                        placeholder="0123456789"
                        value={profileData.phone}
                        onChange={(e) => setProfileData({ ...profileData, phone: e.target.value })}
                        disabled={!isEditing}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
                    <div className="relative">
                      <MapPin className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="address"
                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                        value={profileData.address}
                        onChange={(e) => setProfileData({ ...profileData, address: e.target.value })}
                        disabled={!isEditing}
                        className="pl-10"
                      />
                    </div>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="bio">Gi·ªõi thi·ªáu</Label>
                  <Textarea
                    id="bio"
                    placeholder="Vi·∫øt v√†i d√≤ng v·ªÅ b·∫£n th√¢n..."
                    value={profileData.bio}
                    onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })}
                    disabled={!isEditing}
                    rows={4}
                  />
                </div>
              </CardContent>
              <CardFooter className="flex justify-end space-x-2">
                {isEditing ? (
                  <>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setIsEditing(false)}
                    >
                      H·ªßy
                    </Button>
                    <Button type="submit">
                      <Save className="mr-2 h-4 w-4" />
                      L∆∞u thay ƒë·ªïi
                    </Button>
                  </>
                ) : (
                  <Button type="button" onClick={() => setIsEditing(true)}>
                    Ch·ªânh s·ª≠a th√¥ng tin
                  </Button>
                )}
              </CardFooter>
            </form>
          </Card>
        </TabsContent>

        {/* Security Tab */}
        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>ƒê·ªïi m·∫≠t kh·∫©u</CardTitle>
              <CardDescription>
                ƒê·∫£m b·∫£o t√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u m·∫°nh
              </CardDescription>
            </CardHeader>
            <form onSubmit={handlePasswordChange}>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">M·∫≠t kh·∫©u hi·ªán t·∫°i</Label>
                  <div className="relative">
                    <Key className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="currentPassword"
                      type="password"
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                      value={passwordData.currentPassword}
                      onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">M·∫≠t kh·∫©u m·ªõi</Label>
                  <div className="relative">
                    <Key className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="newPassword"
                      type="password"
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                      value={passwordData.newPassword}
                      onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}
                      className="pl-10"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</Label>
                  <div className="relative">
                    <Key className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      id="confirmPassword"
                      type="password"
                      placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                      value={passwordData.confirmPassword}
                      onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}
                      className="pl-10"
                    />
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button type="submit">
                  <Shield className="mr-2 h-4 w-4" />
                  ƒê·ªïi m·∫≠t kh·∫©u
                </Button>
              </CardFooter>
            </form>
          </Card>

          <Card className="mt-6">
            <CardHeader>
              <CardTitle>B·∫£o m·∫≠t hai l·ªõp</CardTitle>
              <CardDescription>
                Th√™m m·ªôt l·ªõp b·∫£o m·∫≠t cho t√†i kho·∫£n c·ªßa b·∫°n
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <p className="text-sm font-medium">X√°c th·ª±c hai y·∫øu t·ªë (2FA)</p>
                  <p className="text-sm text-muted-foreground">
                    B·∫£o v·ªá t√†i kho·∫£n v·ªõi x√°c th·ª±c hai y·∫øu t·ªë
                  </p>
                </div>
                <Button variant="outline">K√≠ch ho·∫°t</Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Activity Tab */}
        <TabsContent value="activity">
          <Card>
            <CardHeader>
              <CardTitle>Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</CardTitle>
              <CardDescription>
                Xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <p className="font-medium">ƒêƒÉng nh·∫≠p th√†nh c√¥ng</p>
                    <p className="text-sm text-muted-foreground">Chrome tr√™n Windows</p>
                  </div>
                  <p className="text-sm text-muted-foreground">2 gi·ªù tr∆∞·ªõc</p>
                </div>
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <p className="font-medium">C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n</p>
                    <p className="text-sm text-muted-foreground">Thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i</p>
                  </div>
                  <p className="text-sm text-muted-foreground">1 ng√†y tr∆∞·ªõc</p>
                </div>
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <p className="font-medium">ƒê·ªïi m·∫≠t kh·∫©u</p>
                    <p className="text-sm text-muted-foreground">M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi</p>
                  </div>
                  <p className="text-sm text-muted-foreground">3 ng√†y tr∆∞·ªõc</p>
                </div>
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <p className="font-medium">ƒêƒÉng nh·∫≠p th·∫•t b·∫°i</p>
                    <p className="text-sm text-muted-foreground text-red-600">Sai m·∫≠t kh·∫©u - Firefox tr√™n MacOS</p>
                  </div>
                  <p className="text-sm text-muted-foreground">5 ng√†y tr∆∞·ªõc</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}